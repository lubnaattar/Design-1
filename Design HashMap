class MyHashMap {

    public class ListNode {
        int key;
        int value;
        ListNode next;
        
        public ListNode(int key, int value){
            this.key = key;
            this.value = value;
        }
    }
    
    private ListNode[] hashMap;

    int hashFunc(int key) {
        return key % hashMap.length;
    }
        
    /** Initialize your data structure here. */
    public MyHashMap() {
        hashMap = new ListNode[1000];
    }
    
    ListNode findElement(int index, int key) {
        if (hashMap[index] == null) {
            // dummy node to point to the head
            hashMap[index] = new ListNode(-1, -1);
            return hashMap[index];
        } else {
            ListNode curr = hashMap[index]; //because we are using dummy node suffices curr=key
            while (curr.next != null && curr.next.key != key) {
                curr = curr.next;
            }
            return curr;
        }
    }

    /** value will always be non-negative. */
    public void put(int key, int value) {
        int index = hashFunc(key);
        ListNode prev = findElement(index, key);
        if (prev.next == null) {
            prev.next = new ListNode(key, value);
        } else {
            prev.next.value = value;
        }
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
         int index = hashFunc(key);
         ListNode prev = findElement(index, key);
         if (prev.next == null) {
             return -1;
         } else {
             return prev.next.value;
         }
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
         int index = hashFunc(key);
         ListNode prev = findElement(index, key);
        if (prev.next == null) { //null pointer exception for input
            return;
        } else {
            prev.next = prev.next.next;
        }
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
